c
ship_travel&.from_location&.name
ship_travel&.to_location&.name
user_ship.ship.model
user_ship.location_name
user_ship.total_scu
user_ship.used_scu
user_ship.available_cargo_space
current_tick
ship_travel&.seconds_remaining(current_tick)
user_ship.total_scu
user_ship.total_scu,
      {
        status: 'success',
        wallet_balance: shard_user.wallet_balance,
        ship: {
          model: user_ship.ship.model,
          location: user_ship.location_name,
          total_scu: user_ship.total_scu,
          used_scu: user_ship.used_scu,
          available_cargo_space: user_ship.available_cargo_space,
          travel_status: ship_travel.user_ship.status,
          from_location: ship_travel&.from_location&.name,
          to_location: ship_travel&.to_location&.name,
          arrival_tick: ship_travel&.arrival_tick,
          current_tick: current_tick,
          time_remaining: ship_travel&.seconds_remaining(current_tick)
        },
        cargo: cargo,
      }
c
user_ship.location_name
user_ship.location_name,
user_ship.ship.model
user_ship.ship
ShipTravel.last
ship_travel
c
shard_user.user_ships.order(updated_at: :desc).first
c
self
is_paused
c
user_ship.ship_travel
user_ship
c
user_ship
c
ShardUser.last.user_ships
ShardUser.last
ShardUser.first.user_ships
ShardUser.first
User.last.user_ships
User.user_ships
User.first
shard_user.user_ships
shard_user
UserShip.last.shard
UserShip.last
shard_user.user_ships
shard_user
user_ship
c
wallet_balancec
result
n
wallet_balance
n
shard
n
username
c
@ship.speed
c
@ship.update(speed:1)
@ship.speed
@ship
c
planets = Location.where(classification: "planet", star_system_name: system_name).includes(:parent)
planets.first
planets = Location.where(classification: "planet", star_system_name: system_name).includes(:star)
Location.where(classification:"planet", star_system_name:"Stanton").first
Location.where(classification:"planet", star_system_name:"Stanton")
Location.where(classification:"planet").first
Location.where(classification:"planet")
Location.last
Planet.last
planets
planets.first
planets
c
star.mass
star.star_system_name
star
c
UserShip.find_by!(guid: params[:guid])
c
UserShip.last
UserShip.find_by!(guid: params[:guid])
c
travel.arrival_tick
c
travel
c
userc
shard
user
c
UserShip.last.destroy
UserShip.last
c
UserShip.last
shard_user.user_ships
shard_user
c
UserShip.last
shard_user.user_ships
shard_user
c
Shard.find_by(channel_uuid: shard)
shard
c
UserShip.last
shard_user.user_ships
shard_user
UserShip.last
c
ship
params
shard_user
user_ship
c
user_ship
c
user
c
user.shard_users.first
shard.id
c
user.shard_users.find_by(shard_id:shard.id)
ShardUser.last
shard_users
shard.name
user
c
Shard.find_by(channel_uuid: shard)
shard
Shard.find(channel_uuid: shard)
c
Shard.last
Shard.find_by(uuid:shard)
Shard.find_by_uuid(shard)
shard
c
Shard.last
shard
c
ShardUser
n
shard
n
 params.dig(:trade, :username) || params[:username]
params
c
Ship
Vehicle
c
Shard
Shard.last
resolve_shard(travel_params[:shard_uuid])
user
n
c
RabbitmqSender.send_event(params[:streamer])
params
c
facility.commodity.name
facility.commodity
facility
c
ProductionFacility.first
facilities_to_import
price_data_array
c
      TwitchNotificationService.notify_arrival(travel.user.username, travel.to_location.name)
travel.user
user
 TwitchNotificationService.notify_arrival(user.username, travel.to_location.name)
c
UserShip.last
ShipTravel.last
user_ship.active_travel
n
user_ship
n
shard_user
n
shard
n
user
c
facility
c
user_ship
location
facility
scu_to_sell
facility.local_sell_price.to_f
c
n
scu_to_sell
cargo_to_sell.scu
n
shard_user.update_credits(total_revenue)
c
n
facility.local_sell_price.to_f * scu_to_sell
n
scu_to_sell
n
facility.inventory
cargo_to_sell.scu
n
cargo_to_sell
n
facility.max_inventory
facility.inventory
facility
n
commodity
n
c
ProductionFacility.where("location_name ILIKE ?", "%#{location.name}%").where("local_buy_price < 0")
ProductionFacility.where("location_name ILIKE ?", "%#{location.name}%").where("local_buy_price > 0")
ProductionFacility.where("location_name ILIKE ?", "%#{location.name}%")
commodities
facility
location
c
ProductionFacility.where(location_name:"Seraphim Station")
ProductionFacility.where(location_name:"Seraphim")
location
commodities
c
shard_user.user
shard_user
(shard_user.wallet_balance / facility.local_buy_price.to_f).floor
c
facility
c
      facility = ProductionFacility.where("location_name ILIKE ? AND commodity_name = ?", "%#{location.name}%", commodity_name).first
commodity
ProductionFacility.find_by(location_name: location_name)
location_name
commodity_name
c
location
c
ProductionFacility.where("location_name ILIKE ? AND commodity_name = ?", "%#{location.name}%", commodity.name).first
ProductionFacility.last
facility
commodity
commodity_id
location_name
location.name
ProductionFacility.where("location_name ILIKE ? AND commodity_id = ?", "%#{location.name}%", commodity.id)
location.name
c
ProductionFacility.find_by(facility_name:"CRU-L1")
ProductionFacility.find_by(code:"CRUL1")
location.name
ProductionFacility.find_by(code:"CRUL1")
ProductionFacility.where(code:"CRUL1").first
