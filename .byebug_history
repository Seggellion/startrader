c
max_scu = (scu.blank? || scu.to_i <= 0) ? cargo_to_sell.scu : scu.to_i
      max_scu = cargo_to_sell.scu if scu.blank? || scu.to_i <= 0
scu
cargo_to_sell.scu if scu.blank? || scu.to_i <= 0
[max_scu, max_facility_demand]
scu_to_sell = [max_scu, max_facility_demand].select { |v| v > 0 }.min
n
facility.inventory
cargo_to_sell
n
max_scu
max_scu = cargo_to_sell.scu if scu.blank? || scu.to_i <= 0
c
facility
n
commodity
n
      facility = ProductionFacility.where("location_name ILIKE ? AND commodity_name = ? AND price_sell > 0", "%#{location.name}%", commodity.name).first
c
commodity_name.blank?
ProductionFacility.last
commodity_name
c
    new_ship_location = Location.find_by_name("Orison").name
c
shard_user.user_ships.find_by(guid: ship_guid)
ship_guid
n
Shard.find_by_name(shard)
n
return false
[scu.to_i, max_affordable_scu, max_cargo_space, max_facility_inventory].select { |v| v > 0 }.min
max_cargo_space
c
User.where("LOWER(username) = ?", params[:username].to_s.downcase.strip).first
user
c
params[:player_guid].present?
User.where("LOWER(username) = ?", params[:username].to_s.downcase.strip).first
params
c
commodity
c
Commodity.first
commodity_name
commodity = Commodity.where("name ILIKE ?", commodity_name).first!
c
username
shard
scu
commodity_name
c
ShardUser.last
ShardUser
shard_user = ShardUser.find_by(shard_id: shard.id, user_id: user.id)
c
n
destination
shard
user
c
ShipTravel.where("arrival_tick <= ?", current_tick)
ShipTravel.where("arrival_tick <= ?", current_tick).
ShipTravel.where
c
ship_travel&.from_location&.name
ship_travel&.to_location&.name
user_ship.ship.model
user_ship.location_name
user_ship.total_scu
user_ship.used_scu
user_ship.available_cargo_space
current_tick
ship_travel&.seconds_remaining(current_tick)
user_ship.total_scu
user_ship.total_scu,
      {
        status: 'success',
        wallet_balance: shard_user.wallet_balance,
        ship: {
          model: user_ship.ship.model,
          location: user_ship.location_name,
          total_scu: user_ship.total_scu,
          used_scu: user_ship.used_scu,
          available_cargo_space: user_ship.available_cargo_space,
          travel_status: ship_travel.user_ship.status,
          from_location: ship_travel&.from_location&.name,
          to_location: ship_travel&.to_location&.name,
          arrival_tick: ship_travel&.arrival_tick,
          current_tick: current_tick,
          time_remaining: ship_travel&.seconds_remaining(current_tick)
        },
        cargo: cargo,
      }
c
user_ship.location_name
user_ship.location_name,
user_ship.ship.model
user_ship.ship
ShipTravel.last
ship_travel
c
shard_user.user_ships.order(updated_at: :desc).first
c
self
is_paused
c
user_ship.ship_travel
user_ship
c
user_ship
c
ShardUser.last.user_ships
ShardUser.last
ShardUser.first.user_ships
ShardUser.first
User.last.user_ships
User.user_ships
User.first
shard_user.user_ships
shard_user
UserShip.last.shard
UserShip.last
shard_user.user_ships
shard_user
user_ship
c
wallet_balancec
result
n
wallet_balance
n
shard
n
username
c
@ship.speed
c
@ship.update(speed:1)
@ship.speed
@ship
c
planets = Location.where(classification: "planet", star_system_name: system_name).includes(:parent)
planets.first
planets = Location.where(classification: "planet", star_system_name: system_name).includes(:star)
Location.where(classification:"planet", star_system_name:"Stanton").first
Location.where(classification:"planet", star_system_name:"Stanton")
Location.where(classification:"planet").first
Location.where(classification:"planet")
Location.last
Planet.last
planets
planets.first
planets
c
star.mass
star.star_system_name
star
c
UserShip.find_by!(guid: params[:guid])
c
UserShip.last
UserShip.find_by!(guid: params[:guid])
c
travel.arrival_tick
c
travel
c
userc
shard
user
c
UserShip.last.destroy
UserShip.last
c
UserShip.last
shard_user.user_ships
shard_user
c
UserShip.last
shard_user.user_ships
shard_user
c
Shard.find_by(channel_uuid: shard)
shard
c
UserShip.last
shard_user.user_ships
shard_user
UserShip.last
c
ship
params
shard_user
user_ship
c
user_ship
c
user
c
user.shard_users.first
shard.id
c
user.shard_users.find_by(shard_id:shard.id)
ShardUser.last
shard_users
shard.name
user
c
Shard.find_by(channel_uuid: shard)
shard
Shard.find(channel_uuid: shard)
c
Shard.last
Shard.find_by(uuid:shard)
Shard.find_by_uuid(shard)
shard
c
Shard.last
shard
c
ShardUser
n
shard
n
 params.dig(:trade, :username) || params[:username]
params
c
Ship
Vehicle
c
Shard
Shard.last
resolve_shard(travel_params[:shard_uuid])
user
n
c
RabbitmqSender.send_event(params[:streamer])
params
c
facility.commodity.name
facility.commodity
facility
c
ProductionFacility.first
facilities_to_import
price_data_array
c
      TwitchNotificationService.notify_arrival(travel.user.username, travel.to_location.name)
travel.user
user
 TwitchNotificationService.notify_arrival(user.username, travel.to_location.name)
c
UserShip.last
ShipTravel.last
