c
planet.star
c
planet
planet.id_star_system
planet.id_star_syste
planet.star.first
planet.star
planet
self
self.stars
      self.class.stars[id_star_system]
self.class.stars
planet.star
planet
c
user_ship.location
c
destination
user_ship.location
c
user_ship
destination.star_system_name
 user_ship.update(location:destination.star_system_name)
c
user_ship
user_ship.location
user_ship.location.star_system_name
destination.star_system_name
n
destination
n
user_ship
n
c
parent_name
c
 location_data['name']
location_data['planet_name']
parent_name
c
parent_name
location_data['planet_name']
 location_data['name']
c
Location.where(classification:"city").destroy_all
Location.where(classification:"city")
c
location.parent
location.id_moon
location.classification
location
self
c
location.periapsis
planet_coords
parent_planet
c
tick
other_location
self
 PlanetPositionCalculator.calculate_position(other_location, tick)
PlanetPositionCalculator.calculate_position(self, tick)
c
from_location
start_tick
to_location
ship
c
duration
n
Tick.current
c
user_ship
destination
n
destination.star_system_name
n
destination
n
destination = Location.where("LOWER(name) = ?", travel_params[:location].downcase).first
travel_params[:location]
destination
n
user_ship
n
c
location.parent
location
c
location
parent_planet
c
location.periapsis
locationperiapsis
location
c
other_location
self
c
other_location
c
location.periapsis
location
c
other_location
c
location
planet = location
c
planet.periapsis
planet = location
location.periapsis
c
location
c
planet
c
planet
c
semi_major_axis
c
semi_major_axis
c
distance
c
semi_major_axis
c
semi_major_axis
c
distance
c
self
other_location
position2
position1
c
ShipTravel.last
user_ship.active_travel
user_ship
c
Tick.current
ShipTravel.last
user.active_ship.active_travel
user.active_ship
c
user.active_ship
user.active_ship.
user.active_ship.active_travel
user.active_ship.active_travel&
user.active_ship.active_travel&.
c
user.active_ship.active_travel
user.active_ship.ship_travel
user.active_ship
c
 Location.find_by(name: travel_params[:location])
c
Location.find_by(name: travel_params[:location])
travel_params[:location]
c
Location.find_by(name: travel_params[:location])
travel_params[:location]
c
 user.user_ships.order(updated_at: :desc).first.ship.slug
 user.user_ships.order(updated_at: :desc).first.ship
 user.user_ships.order(updated_at: :desc).first
user.user_ships
user
c
user
c
user
c
user
c
facility
facility.inventory
c
facility
facility.inventory.to_f
min_buy_price
max_buy_price
inventory_ratio.to_i
inventory_ratio
facility.local_buy_price.to_d
new_buy_price
new_sell_price
base_buy_price.to_i
base_buy_price
facility
c
facility.id == 18599
facility.id
c
current_tick % 1 == 0
c
travel.user_ship
c
 ShipTravel.destroy_all
 ShipTravel.where(arrival_tick: current_tick)
 ShipTravel.where(arrival_tick: current_tick).count
 ShipTravel.where(arrival_tick: current_tick).first
Tick.current
current_tick
c
facility.inventory
c
production_facility_params
c
 ProductionFacility.find_by_id(params[:id])
params[:id]
c
facility.commodity.price_sell.to_i
facility.commodity
facility.price_sell.commodity.to_i
facility.price_sell.to_i
facility.price_sell.to_d
facility.price_sell
facility.sell_price
facility.local_sell_price > 0
facility
facility.local_sell_price
facility.local_sell_price.
facility.local_buy_price
facility.local_buy_price.
supports_selling
supports_buying
c
price_data_array
c
price_data = data['data'] ? data['data'].first : data.first
c
facility
c
price_multiplier
inventory_ratio
c
inventory_ratio
c
facility
facility.inventory
inventory_ratio
c
facility
facility.price_sell
faciliity.price_sell
c
        max_affordable_scu = (wallet_balance / facility.sell_price.to_f).floor
 max_affordable_scu = (wallet_balance / facility.local_sell_price.to_f).floor
c
facility
total_cost
c
amount
c
